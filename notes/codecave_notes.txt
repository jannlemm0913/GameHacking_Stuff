Call function from code cave with CreateRemoteThread injection:

push rdx                       // momentanen wert in rdx auf stack zwischenspeichern
push rcx                       // momentanen wert in rcx auf stack zwischenspeichern
mov rdx, qword ptr ss:[rsp]    // der string, der von CRT übergeben wird, ist in rcx. dieses wurde gerade auf den stack gepusht
mov rcx, 0x(times)             // times = 1 in diesem beispiel
movabs rax, 0x(hiddenFunction) // call hiddenFunction ist nicht position independent, da compiler hier einen immediate integer
                               // mit offset zur hiddenFunction adresse einsetzen würde
                               // so wird absolute address von hiddenFunction in rax geschrieben
call rax                       // rax wird von hiddenFunction sowieso überschrieben, deshalb kann das register genutzt werden
pop rcx                        // vorherigen wert in rcx von stack in register, rsp-0x08
pop rdx                        // vorherigen wert in rdx von stack in register, rsp-0x08
ret

https://defuse.ca/online-x86-assembler.htm


BYTE codeCave[28] = {
    0x52,                                      // push rdx
    0x51,                                      // push rcx
    0x48, 0x8b, 0x14, 0x24,                    // mov rdx, qword ptr [rsp]
    0x48, 0xc7, 0xc1, 0x01, 0x00, 0x00, 0x00,  // mov rcx, 0x(times)
    0x48, 0xb8, 0x00, 0x00, 0x00, 0x00,        // movabs rax, 0x(hiddenFunction)
    0x00, 0x00, 0x00, 0x00,
    0xff, 0xd0,                                // call rax
    0x59,                                      // pop rcx
    0x5A,                                      // pop rdx
    0xC3                                       // ret
};

hiddenFunction address: 00007FF7E1EF10F0
little endian: 00 00 7f f7 e1 ef 10 f0

-----------------------------------------------------------------------------------------------------------------

Call function from code cave with thread hijacking:

push rax                        // push general registers to the stack
push rcx                        // (rsp changes don't matter because they are popped back later)
push rdx                        // pushad not available in x64 anymore!
push r8                         // instead, push volatile registers to stack one by one
push r9
push r10
push r11
pushfq                          // push RFLAGS to the stack
mov rax, string                 // there is no 'push imm64' instruction, write value into register first
push rax                        // push string parameter to stack (rsp+0x08)
mov rdx, qword ptr ss:[rsp]
mov rax, times                  // even though times should be an int, it still cannot be pushed to the stack directly
push rax                        // push times parameter to stack (rsp+0x08)
mov rcx, qword ptr ss:[rsp]
movabs rax, 0x(hiddenFunction)  // erstes argument (times) muss in rcx sein, zweites argument (string) muss in rdx sein
                                // pushed 10*8 bytes on the stack, should be 16 byte aligned before call
sub rsp, 0x20                   // add shadow space
call rax
add rsp, 0x20                   // remove shadow space (two separate instructions for clarity)
add rsp, 0x10                   // "remove" our two parameters from the stack
popfq                           // pop RFLAGS from the stack
pop r11                         // pop volatile registers from the stack
pop r10
pop r9
pop r8
pop rdx
pop rcx
mov dword ptr [rsp], RIP_LOW    // push the pre-hijacking RIP to the stack without using registers
mov dword ptr [rsp+4], RIP_HIGH // has to be done in two steps because of 64 bit instruction set restrictions
ret                             // "returns" to the address on the stack (original RIP)


0xDEADBEEFDEADBEEF

push rax
push rcx
push rdx
push r8
push r9
push r10
push r11
pushfq
mov rax, 0xDEADBEEFDEADBEEF
push rax
mov rdx, qword ptr ss:[rsp]
mov rax, 0xDEADBEEF
push rax
mov rcx, qword ptr ss:[rsp]
movabs rax, 0xDEADBEEFDEADBEEF
sub rsp, 0x20
call rax
add rsp, 0x20
add rsp, 0x10
popfq
pop r11
pop r10
pop r9
pop r8
pop rdx
pop rcx
mov dword ptr [rsp], 0xDEADBEEF
mov dword ptr [rsp+4], 0xDEADBEEF
ret

BYTE codeCave[93] = { 0x50, 0x51, 0x52, 0x41, 0x50, 0x41, 0x51, 0x41, 0x52, 0x41, 0x53, 0x9C, 0x48, 0xB8, 0xEF, 0xBE, 0xAD, 0xDE, 0xEF, 0xBE, 0xAD, 0xDE, 0x50, 0x48, 0x8B, 0x14, 0x24, 0x48, 0xB8, 0xEF, 0xBE, 0xAD, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x50, 0x48, 0x8B, 0x0C, 0x24, 0x48, 0xB8, 0xEF, 0xBE, 0xAD, 0xDE, 0xEF, 0xBE, 0xAD, 0xDE, 0x48, 0x83, 0xEC, 0x20, 0xFF, 0xD0, 0x48, 0x83, 0xC4, 0x20, 0x48, 0x83, 0xC4, 0x10, 0x9D, 0x41, 0x5B, 0x41, 0x5A, 0x41, 0x59, 0x41, 0x58, 0x5A, 0x59, 0xC7, 0x04, 0x24, 0xEF, 0xBE, 0xAD, 0xDE, 0xC7, 0x44, 0x24, 0x04, 0xEF, 0xBE, 0xAD, 0xDE, 0xC3 };


0:  50                      push   rax
1:  51                      push   rcx
2:  52                      push   rdx
3:  41 50                   push   r8
5:  41 51                   push   r9
7:  41 52                   push   r10
9:  41 53                   push   r11
b:  9c                      pushf
c:  48 b8 ef be ad de ef    movabs rax,0xdeadbeefdeadbeef
13: be ad de
16: 50                      push   rax
17: 48 8b 14 24             mov    rdx,QWORD PTR [rsp]
1b: 48 b8 ef be ad de 00    movabs rax,0xdeadbeef
22: 00 00 00
25: 50                      push   rax
26: 48 8b 0c 24             mov    rcx,QWORD PTR [rsp]
2a: 48 b8 ef be ad de ef    movabs rax,0xdeadbeefdeadbeef
31: be ad de
34: 48 83 ec 20             sub    rsp,0x20
38: ff d0                   call   rax
3a: 48 83 c4 20             add    rsp,0x20
3e: 48 83 c4 10             add    rsp,0x10
42: 9d                      popf
43: 41 5b                   pop    r11
45: 41 5a                   pop    r10
47: 41 59                   pop    r9
49: 41 58                   pop    r8
4b: 5a                      pop    rdx
4c: 59                      pop    rcx
4d: c7 04 24 ef be ad de    mov    DWORD PTR [rsp],0xdeadbeef
54: c7 44 24 04 ef be ad    mov    DWORD PTR [rsp+0x4],0xdeadbeef
5b: de
5c: c3                      ret 
